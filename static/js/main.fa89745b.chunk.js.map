{"version":3,"sources":["components/QuoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["QuoteMachine","assignNewQuoteIndex","selectedQuote","Fragment","id","quote","author","className","onClick","target","href","icon","faTwitter","size","App","props","generateNewQuoteIndex","state","quotes","length","random","setState","selectedQuoteIndex","fetch","then","data","json","this","Number","isInteger","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uTA2BeA,EAtBM,SAAC,GAAD,IAAGC,EAAH,EAAGA,oBAAqBC,EAAxB,EAAwBA,cAAxB,OACpB,kBAAC,IAAMC,SAAP,KACC,yBAAKC,GAAG,kBACP,yBAAKA,GAAG,SAASF,EAAcG,QAEhC,yBAAKD,GAAG,UAAUF,EAAcI,QAChC,yBAAKF,GAAG,mBACP,uBAAGG,UAAU,SAASH,GAAG,YAAYI,QAASP,GAA9C,cAIA,uBACCG,GAAG,cACHK,OAAO,SACPC,KAAI,gDAA2CR,EAAcG,MAAzD,cAAoEH,EAAcI,SAEtF,kBAAC,IAAD,CAAiBK,KAAMC,IAAWC,KAAK,WCkC5BC,G,kBAhDd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KAoBPC,sBAAwB,WACvB,GAAK,EAAKC,MAAMC,OAAOC,OAGvB,OAAOC,iBAAO,EAAG,EAAKH,MAAMC,OAAOC,OAAS,IAzB1B,EA4BnBlB,oBAAsB,WACrB,EAAKoB,SAAS,CAAEC,mBAAoB,EAAKN,2BA3BzC,EAAKC,MAAQ,CACZC,OAAQ,GACRI,mBAAoB,MAJH,E,iFAQE,IAAD,OACnBC,MAAM,mGACJC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACN,GAAD,OAAY,EAAKG,SAAS,CAAEH,UAAU,EAAKjB,0B,+BAsBlD,OACC,yBAAKG,GAAG,iCACP,yBAAKA,GAAG,kBACNuB,KAAKzB,cACL,kBAAC,EAAD,CACCA,cAAeyB,KAAKzB,cACpBD,oBAAqB0B,KAAK1B,sBAExB,S,oCA1BP,GAAK0B,KAAKV,MAAMC,OAAOC,QAAWS,OAAOC,UAAUF,KAAKV,MAAMK,oBAG9D,OAAOK,KAAKV,MAAMC,OAAOS,KAAKV,MAAMK,wB,GAnBpBQ,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,iB","file":"static/js/main.fa89745b.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst QuoteMachine = ({ assignNewQuoteIndex, selectedQuote }) => (\r\n\t<React.Fragment>\r\n\t\t<div id=\"quoteContainer\">\r\n\t\t\t<div id=\"quote\">{selectedQuote.quote}</div>\r\n\t\t</div>\r\n\t\t<div id=\"author\">{selectedQuote.author}</div>\r\n\t\t<div id=\"buttonContainer\">\r\n\t\t\t<a className=\"button\" id=\"new-quote\" onClick={assignNewQuoteIndex}>\r\n\t\t\t\tnext quote\r\n\t\t\t</a>\r\n\r\n\t\t\t<a\r\n\t\t\t\tid=\"tweet-quote\"\r\n\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\thref={`https://twitter.com/intent/tweet?text=${selectedQuote.quote} - ${selectedQuote.author}`}\r\n\t\t\t>\r\n\t\t\t\t<FontAwesomeIcon icon={faTwitter} size=\"lg\" />\r\n\t\t\t</a>\r\n\t\t</div>\r\n\t</React.Fragment>\r\n);\r\n\r\nexport default QuoteMachine;\r\n","import React, { Component } from 'react';\r\nimport { random } from 'lodash';\r\nimport QuoteMachine from './components/QuoteMachine';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.scss';\r\n\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tquotes: [],\r\n\t\t\tselectedQuoteIndex: null\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://raw.githubusercontent.com/tomsza26/Call-of-Duty---Quotes-Machine/master/src/quotes.json')\r\n\t\t\t.then((data) => data.json())\r\n\t\t\t.then((quotes) => this.setState({ quotes }, this.assignNewQuoteIndex));\r\n\t}\r\n\r\n\tget selectedQuote() {\r\n\t\tif (!this.state.quotes.length || !Number.isInteger(this.state.selectedQuoteIndex)) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\treturn this.state.quotes[this.state.selectedQuoteIndex];\r\n\t}\r\n\r\n\tgenerateNewQuoteIndex = () => {\r\n\t\tif (!this.state.quotes.length) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\treturn random(0, this.state.quotes.length - 1);\r\n\t};\r\n\r\n\tassignNewQuoteIndex = () => {\r\n\t\tthis.setState({ selectedQuoteIndex: this.generateNewQuoteIndex() });\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div id=\"d-flex justify-content-center\">\r\n\t\t\t\t<div id=\"innerContainer\">\r\n\t\t\t\t\t{this.selectedQuote ? (\r\n\t\t\t\t\t\t<QuoteMachine\r\n\t\t\t\t\t\t\tselectedQuote={this.selectedQuote}\r\n\t\t\t\t\t\t\tassignNewQuoteIndex={this.assignNewQuoteIndex}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t) : null}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}